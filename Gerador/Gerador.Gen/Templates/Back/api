using Common.API;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using <#namespace#>.Services;
using <#namespace#>.Dto;
using <#namespace#>.Filters;
using <#namespace#>.Data.Repository;
using System;
using System.Threading.Tasks;
using Common.Domain.Base;
using <#namespace#>.CrossCuting;
using Microsoft.AspNetCore.Authorization;

namespace <#namespace#>.Api.Controllers
{
    public class <#className#>ControllerBase : Controller
    {
        protected readonly <#className#>Service _service;
        protected readonly <#className#>Repository _rep;
        protected readonly ILogger _logger;
        protected readonly EnviromentInfo _env;

        public <#className#>ControllerBase(<#className#>Service service, <#className#>Repository rep, ILoggerFactory logger, EnviromentInfo env)
        {
            this._service = service;
            this._rep = rep;
            this._logger = logger.CreateLogger<<#className#>Controller>();
            this._env = env;
        }

        #region Principals
		
        [Authorize]
        [HttpGet]
        public virtual async Task<IActionResult> Get([FromQuery]<#className#>Filter filters)
        {
            var result = new HttpResult<<#className#>Dto>(this._logger, this._service);
            try
            {
                var searchResult = await this._service.GetByFiltersPaging(filters);
                return result.ReturnCustomResponse(searchResult);
            }
            catch (Exception ex)
            {
                return result.ReturnCustomException(ex, "<#className#>", filters);
            }
        }

<#ApiGet#>

        [Authorize]
        [HttpPost]
        public virtual async Task<IActionResult> Post([FromBody]<#className#>DtoSave dto)
        {
            var result = new HttpResult<<#className#>Dto>(this._logger, this._service);
            try
            {
                var returnModel = await this._service.Save(dto);
                return result.ReturnCustomResponse(returnModel);

            }
            catch (Exception ex)
            {
                return result.ReturnCustomException(ex, "<#className#>", dto);
            }
        }
		
        [Authorize]
        [HttpPut]
        public virtual async Task<IActionResult> Put([FromBody]<#className#>DtoSave dto)
        {
            var result = new HttpResult<<#className#>Dto>(this._logger, this._service);
            try
            {
                var returnModel = await this._service.SavePartial(dto);
                return result.ReturnCustomResponse(returnModel);

            }
            catch (Exception ex)
            {
                return result.ReturnCustomException(ex, "<#className#>", dto);
            }
        }
		
        [Authorize]
        [HttpDelete]
        public virtual async Task<IActionResult> Delete(<#className#>Dto dto)
        {
            var result = new HttpResult<<#className#>Dto>(this._logger, this._service);
            try
            {
                await this._service.Remove(dto);
                return result.ReturnCustomResponse(dto);
            }
            catch (Exception ex)
            {
                return result.ReturnCustomException(ex, "<#className#>", dto);
            }
        }

        #endregion

		#region Others
		
        [Authorize]
        [HttpGet("Export")]
        public virtual async Task<IActionResult> Export([FromQuery]<#className#>Filter filters)
        {
            var result = new HttpResult<dynamic>(this._logger);
            try
            {
                var searchResult = await this._rep.GetDataListCustom(filters);
                var export = new ExportExcelCustom<dynamic>(filters, "<#className#>");
                var file = export.ExportFile(this.Response, searchResult, "<#className#>", this._env.RootPath);
                return File(file, export.ContentTypeExcel(), export.GetFileName());
            }
            catch (Exception ex)
            {
                return result.ReturnCustomException(ex, "<#className#>", filters);
            }
        }
		
        [Authorize]
        [HttpGet("DataItems")]
        public virtual async Task<IActionResult> DataItems([FromQuery]<#className#>Filter filters)
        {
            var result = new HttpResult<dynamic>(this._logger, this._service);
            try
            {
                var items = await this._service.GetDataItems(filters);
                return result.ReturnCustomResponse(items);
            }
            catch (Exception ex)
            {
                return result.ReturnCustomException(ex, "Assinatura", filters);
            }
        }

        #endregion

    }
}
