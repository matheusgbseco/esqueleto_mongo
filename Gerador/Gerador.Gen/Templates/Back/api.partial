using Common.API;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Routing;
using Microsoft.Extensions.Logging;
using <#namespace#>.Services;
using <#namespace#>.Dto;
using <#namespace#>.Filters;
using <#namespace#>.Data.Repository;
using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Common.Domain.Base;

namespace <#namespace#>.Api.Controllers
{
    [Route("api/[controller]")]
    public class <#className#>Controller : <#className#>ControllerBase
    {
        public <#className#>Controller(<#className#>Service service, <#className#>Repository rep, ILoggerFactory logger, EnviromentInfo env)
            : base(service, rep, logger, env)
        { }
		
		[Authorize]
        [HttpGet]
        public override async Task<IActionResult> Get([FromQuery]<#className#>Filter filters)
        {
			return await Task.Run(() =>
            {
                var result = new HttpResult<dynamic>(this._logger);
                return result.ReturnMethodNotAllowed();
            });
        }

        [Authorize]
        [HttpPost]
        public override async Task<IActionResult> Post([FromBody]<#className#>DtoSave dto)
        {
			return await Task.Run(() =>
            {
                var result = new HttpResult<dynamic>(this._logger);
                return result.ReturnMethodNotAllowed();
            });
        }
		
        [Authorize]
        [HttpPut]
        public override async Task<IActionResult> Put([FromBody]<#className#>DtoSave dto)
        {
			return await Task.Run(() =>
            {
                var result = new HttpResult<dynamic>(this._logger);
                return result.ReturnMethodNotAllowed();
            });
        }
		
        [Authorize]
        [HttpDelete]
        public override async Task<IActionResult> Delete(<#className#>Dto dto)
        {
			return await Task.Run(() =>
            {
                var result = new HttpResult<dynamic>(this._logger);
                return result.ReturnMethodNotAllowed();
            });
        }

        [Authorize]
        [HttpGet("Export")]
        public override async Task<IActionResult> Export([FromQuery]<#className#>Filter filters)
        {
			return await Task.Run(() =>
            {
                var result = new HttpResult<dynamic>(this._logger);
                return result.ReturnMethodNotAllowed();
            });
        }
		
        [Authorize]
        [HttpGet("DataItems")]
        public override async Task<IActionResult> DataItems([FromQuery]<#className#>Filter filters)
        {
			return await Task.Run(() =>
            {
                var result = new HttpResult<dynamic>(this._logger);
                return result.ReturnMethodNotAllowed();
            });
        }

    }
}
